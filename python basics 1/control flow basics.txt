Decide Play Actions Based on Weather Conditions

def weather_decision(temperature):
    
    if temperature >= 35:
        return "It's too hot, I won't play."
    elif 15 <= temperature < 35:  # Fill the condition
        return "It's normal, I will play."
    else:
        return "It's cold, I will play with a jacket."
2. Determine the Suitable Movie Based on Age
def movie_night(age):
    
    if age >= 7:  # Fill the condition
        return "You can watch a movie."
    else:
        return "You should watch a cartoon movie."
3. Filter Fruits with More Than Five Characters
def filter_fruits(fruits):
    result = []
    for fruit in fruits:
        # Fill the condition below
        if len(fruit) > 5:
            result.append(fruit)
    return result
4. Maximize Shopping with a Given Budget
def shopping_budget(prices, budget):
    total_spent = 0
    for price in prices:
        total_spent += price
        if total_spent > budget:  # Check after adding the current price
            return "Out of Budget"
    return total_spent
  5
Ice Cream Decision

Predict the output of the following code:


Preview

I will save my money.


None


I will buy an ice cream.


Error

Correct!

6
Exam Grades

Predict the output of the following code:


Preview

Average


Fail


Good


Excellent

Correct!


7
Water Consumption

Predict the output of the following code:


Preview

2.1


3.3


2.5


1.8

Correct!


8
Travel Distance

Predict the output of the following code:


Preview

50


90


Cannot Travel


100

Correct!
1. Categorize Temperature Levels
def temperature_category(temp):
    if temp < 0:
        return "Freezing"
    elif temp < 10:
        return "Cold"
    elif temp < 20:
        return "Cool"
    elif temp < 30:
        return "Warm"
    else:
        return "Hot"
2. Filter Even Numbers
def filter_even_numbers(numbers):
    result = []
    for num in numbers:
        if num % 2 == 0:
            result.append(num)
    return result
3. Find the First Multiple
def find_first_multiple(numbers, multiple):
    result = None
    for num in numbers:
        if num % multiple == 0:  # Fill in the condition to check if num is a multiple of the input
            result = num
            break  # Exit the loop as soon as we find the first multiple
    return result
4. Process Numbers with Even Skipping
def process_numbers(numbers):
    total = 0
    for num in numbers:
        if num % 2 == 0:  # Fill in the condition to check if the number is even
            continue  # Skip processing for even numbers
        total += num
    return total
  5
Predict the Output of Conditional Paths

Examine the mystery_output_1 function and predict the output based on the given conditions. Determine which path the code will follow based on the values of x and y.

def mystery_output_1():
    x = 10
    y = 5
    if x > 5:
        print("Path 1") 
    elif y<5:
        print("Path 2")
    else:
        print("Path 3")

Path 3


Path 2


Error


Path 1

Correct!
Start project before checking your activities.

6
Predict the Output of Counting Logic

Analyze the code snippet and predict the output of the mystery_output_2 function.

def mystery_output_2(): 
    count = 0
    for i in range(5):
        if i % 2 == 0:
            count += 1
        else:
            count += 2
    print(count)

7


3


5


4

Correct!
Start project before checking your activities.

7
Predict the Output of Loop with Break and Continue

Analyze the mystery_output_3 function and predict the output.

def mystery_output_3():
    total = 0
    for i in range(10):
        if i == 3:
            continue
        if i == 7:
            break
        total += i
    print(total)

18


35


48


45

Correct!

8
Predict the Output of Conditions

Examine the provided code snippet and predict the output

x = 10
y = 20
z = 15

if x > y:
    result = "X is greater"
elif y > z:
    result = "Y is greater than Z"
elif z > x:
    result = "Z is greater than X"
else:
    result = "No condition is True"

print(result)

None


X is greater


Z is greater than X


Y is greater than Z

Correct!
9. Fix the Temperature Conversion Formula
def temperature_conversion(celsius):  
    fahrenheit = celsius * (9/5) + 32
    return fahrenheit
10. Fix the Code to Find the First Even Number
def find_first_even(numbers):
    for num in numbers:
        if num % 2 == 0:  # Fix the condition to check if num is even
            return num  # Return the first even number
    return None  # Return None if no even number is found
11. Debug the Grade Calculation Logic
def grade_calculation(score): 
    if score >= 90: 
        return "A"
    elif score >= 80: 
        return "B"
    elif score >= 70: 
        return "C" 
    elif score >= 60: 
        return "D"
    else:
        return "F"                          
12. Fix the Code to Calculate the Sum of Numbers
def calculate_sum(numbers):
    total = 0
    for num in numbers:
        total += num 
    return total
Code Activities
13. Write a Function to Find the Largest of Three Numbers
def find_largest(a, b, c):
    if a >= b and a >= c:
        return a
    elif b >= a and b >= c:
        return b
    else:
        return c
14. Write a Function to Find Numbers Divisible by 3 or 5
def divisible_by_3_or_5(limit):
    result = []
    for number in range(limit + 1):
        if number % 3 == 0 or number % 5 == 0:
            result.append(number)
    return result
15. Write a Function to Check if a Number is Prime
def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number ** 0.5) + 1):
        if number % i == 0:
            return False
    return True
 1. Check if a Number is Positive
def check_positive_number(num):
    if num > 0:
        return "Positive"
  2
Determine Age Group

Analyze the following code snippet and determine the output when the age is 16.

def check_age(age):
    if age >= 18:
        return "Adult"
    else:
        return "Minor"

print(check_age(16))

Minor


None of the Above


Adult


Error

Correct!
  3. Categorize a Number
def categorize_number(num):
    if num > 0:
        return "Positive"
    
    elif num < 0:
        return "Negative"
    
    else:
        return "Zero"
4. Assign Grade Category
def grade_category(grade):
    if grade >= 90:
        return "A"
    elif grade >= 70:
        return "B"
    elif grade >= 50:
        return "C"
    else:
        return "Fail"
    pass
  List
Before diving into loops, we'll first explore lists and one of their essential methods: the append method. Since loops often work with sequences, understanding at least one type of sequence, like lists, is important before learning how loops function.

What is a List in Python?
A list is a collection data type in Python that is used to store multiple items in a single variable. Lists are ordered, changeable, and allow duplicate elements. They can contain elements of different data types, including other lists.

Syntax:

list_name = [element1, element2, element3, ...]
Example:

# Creating a list
fruits = ["apple", "banana", "cherry", "apple"]

# Accessing elements
print(fruits[0])  # Output: apple

# Modifying an element
fruits[1] = "blueberry"
print(fruits)  # Output: ['apple', 'blueberry', 'cherry', 'apple']

# Adding an element
fruits.append("mango")
print(fruits)  # Output: ['apple', 'blueberry', 'cherry', 'apple', 'mango']
append() Method
The append() method adds a single element to the end of a list. It does not return anything but modifies the original list.

Syntax:

list_name.append(element)
Example:

# Example of append
numbers = [1, 2, 3]

# Adding a single element
numbers.append(4)
print(numbers)  # Output: [1, 2, 3, 4]

# Adding a string
numbers.append("five")
print(numbers)  # Output: [1, 2, 3, 4, 'five']
5. Calculate the Sum of Numbers
def calculate_sum(numbers):
    total = 0
    # Fill in the loop to iterate through numbers and calculate the sum
    for num in numbers:
        total += num 
    return total
  6
Print Numbers Up to a Limit

Analyze the following code snippet and determine its output when the limit is set to 5.

def print_numbers_upto(limit):
    num = 1
    while num <= limit:
        print(num, end=" ")
        num += 1

print_numbers_upto(5)

5 4 3 2 1


12345


1 2 3 4


None of the given options

Correct!
Break and Continue
Break Statement
The break statement is used to immediately exit a loop, regardless of its current iteration or the loop's condition. Once the break statement is encountered, the program stops executing the remaining code inside the loop and moves to the code that follows the loop. It is often used when a specific condition is met and continuing the loop is unnecessary.

Example:

for i in range(10):
    if i == 5:  # Check if i is equal to 5
        break  # Exit the loop
    print(i)  # Print values until the loop breaks
Continue Statement:
The continue statement skips the current iteration of a loop and moves directly to the next iteration. Unlike break, it does not terminate the loop entirely. It is useful when certain conditions are met and you want to skip only that iteration without stopping the loop.

Example:

for i in range(10):
    if i % 2 == 0:  # Check if i is even
        continue  # Skip the even number
    print(i)  # Print only odd numbers
7. Fix the Sum of Three Numbers
def sum_of_three_numbers(a, b, c):
    sum = a + b + c
    return sum
8. Calculate the Product of a List
def calculate_product(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product
    pass
Break and Continue
9. Find and Stop at a Specific Number
def find_and_stop(numbers):
    for num in numbers:
        if num == 5:
            break
    return "Found 5"
10. Skip Even Numbers in a Loop
11. Fix the Target Search Logic
def find_target(numbers, target):
    for num in numbers:
        if num == target:
            return "Target Found"
    return "Target Not Found"
12. Filter Odd Numbers from a List
def filter_odd_numbers(numbers):
    result = []
    for num in numbers:
        if num % 2 == 0:
            continue
        result.append(num)
    return result
    pass
14
Loop with Conditional Skip and Break

Analyze the following for loop and determine the output.

for i in range(1, 6):
    if i == 3:
        continue
    elif i == 5:
        break
    print(i, end="")

1 2 4


123


124


1 2 3 4

Correct!
15. Debug and Fix: Sum of Squares of Even Numbers
def calculate_sum_even_squares(n):
    total = 0
    for num in range(1, n):
        if num % 2 == 0:
            total += num**2
    return total
16. Identify and Return the Last Valid Number
def find_last_valid(n):
    last_valid = None
    for i in range(1, n + 1):
        if i % 3 == 0:  # Skip multiples of 3
            continue
        if i > 30:  # Stop when the number exceeds 30
            break
        last_valid = i  # Update the last valid number
    return last_valid
    pass
 
