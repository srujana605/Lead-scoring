1
Select the correct output

What will be the output of the following code? Select the correct option.

print("Hello,")
print("Welcome to Python!")

Hello, Welcome to Python!

Hello,
Welcome to Python!

Welcome to Python! Hello,

Welcome to Python!
Hello,
Correct!



2
Write the correct code

Below is incomplete code. Write the complete code to display the output as shown in the input box below.

_____(____, "Welcome to DataWars!")
Expected output:

Hello, Welcome to DataWars!
print("Hello,", "Welcome to DataWars!")
Correct!
Start project before checking your activities.


  3
Which of the following is the correct way to print “Hi there!” in Python 3

Select the correct way to print “Hi there!” in Python 3.


print("Hi there!")

echo("Hi there!")

print "Hi there!"

output("Hi there!")
Correct!


  4
Executing Comments

True or False: Comments are executed by Python when the program runs.


False


True

Correct!


  5
What is the correct error

For the following code, what is the correct error message?

# This line is a comment
print("This will print")
This line is not a comment and not Python code

It will produce a SyntaxError: invalid syntax because This line is not a comment... is not valid code.


It will produce an IndentationError because the code is not properly indented.


It will produce a ValueError because the code is trying to print a string without quotes.


It will produce a TypeError because the code is trying to print a string without quotes.

Correct!


  6
Select the correct option for running script with arguments

To run a file program.py with arguments arg1 and arg2, which command is correct?


python program.py, arg1, arg2

python program.py arg1 arg2

python program.py -arg1 -arg2

python program.py, -arg1, -arg2
Correct!


7
What will be the output of code given

Below is the code written in activity_seven.py file. What will be the output of the code if you run the script with arguments 5 10 15?

import sys

sum = int(sys.argv[1]) + int(sys.argv[2])
average = (sum + int(sys.argv[3]))/2

print("Sum:", sum)
print("Average:", average)

Sum: 15
Average: 15

Sum: 30
Average: 10

Sum: 30
Average: 15

Sum: 15
Average: 15.0
Correct!


8
Create a python script

Create a Python script named print_message.py that takes a message as an argument and prints it. The script should be able to run like this:

python print_message.py "Hello, DataWars!"
You have to create a script in the current directory and run it with the given message as an argument.

Correct!


Variables and Assignments
What are Variables in Python?

A variable in Python is like a container that holds data. You can think of it as a name that points to a value in memory. Variables allow you to store, modify, and retrieve information in your program.

Key Characteristics of Python Variables:

Dynamic Typing: You don’t need to declare the type of a variable. Python automatically determines the type based on the assigned value.
x = 10        # x is an integer
y = "Hello"   # y is a string
z = 3.14      # z is a float
Case-Sensitive: Variable names are case-sensitive (age and Age are different variables).

Naming Rules:

Must start with a letter or an underscore (_).
Cannot start with a number.
Can only contain alphanumeric characters and underscores (_).
Cannot be a reserved keyword (e.g., if, else, True).
Assignment in Python

Assignment is the process of storing a value in a variable. The = operator is used for assignment.

x = 5           # Assigns the value 5 to x
name = "Alice"  # Assigns the string "Alice" to name
Multiple Assignments

Python allows you to assign values to multiple variables simultaneously.

a, b, c = 1, 2, 3    # a = 1, b = 2, c = 3
x = y = z = 0        # x, y, and z are all assigned the value 0
Swapping Variables

You can swap variable values without a temporary variable.

a, b = b, a
Reassigning Variables

Variables can be reassigned to different data types, making Python dynamically typed.

x = 10       # Initially an integer
x = "Python" # Reassigned to a string
Global and Local Variables

Global Variables: Declared outside functions, accessible throughout the program.
Local Variables: Declared inside a function, accessible only within that function.
x = 10  # Global variable

def example():
    y = 5  # Local variable
    print(y)

example()
print(x)
Special Cases

Unpacking: Assign values from a list or tuple to variables.
data = [1, 2, 3]
a, b, c = data  # a = 1, b = 2, c = 3
Constants: Python doesn’t have built-in constant variables, but by convention, variables written in uppercase (e.g., PI = 3.14) are treated as constants.
By understanding variables and assignment, you can efficiently store and manipulate data in your Python programs.


9
Name it Right!

Create a Python script that defines three variables: first_name, age, and is_student. Name the file variables_activity_9.py and run it to check if the variables are created correctly.

Name the file variables_activity_9.py and run it to check if the variables are created correctly.

In the first line of the script, create a variable named first_name and assign it the value "Alice". In the second line, create a variable named age and assign it the value 25. In the third line, create a variable named is_student and assign it the value True.

In the next 3 lines, print the values of these variables using the print() function.

Expected outcome:

Expected output after running the script:

Alice
25
True
Correct!


10
Convert Fahrenheit to Celsius

Write a Python script that takes the temperature in Fahrenheit as input from the user and converts it to Celsius. Create a script named temperature_converter.py and run it to check if the conversion is correct.

Use the input() function to take the temperature in Fahrenheit as input.
Convert the input to an integer.
Convert the temperature from Fahrenheit to Celsius using the formula: Celsius = (Fahrenheit - 32) * 5/9.
Print the temperature in Celsius.
Expected outcome:

Expected output after running the script:

Enter the temperature in Fahrenheit: 32
Temperature in Celsius: 0.0
Correct!
